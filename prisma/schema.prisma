generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(USER)
  company       String?
  position      String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  attendances   Attendance[]
  inductions    InductionCompletion[]
  swmsSignoffs  SwmsSignoff[]
  createdSites  JobSite[]  @relation("SiteCreator")
  createdSwms   Swms[]     @relation("SwmsCreator")
}

enum Role {
  USER
  ADMIN
  CEO
}

model JobSite {
  id            String    @id @default(cuid())
  name          String
  address       String
  description   String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdById   String

  // Relations
  createdBy     User      @relation("SiteCreator", fields: [createdById], references: [id])
  attendances   Attendance[]
  inductions    Induction[]
  swms          Swms[]
}

model Attendance {
  id            String    @id @default(cuid())
  userId        String
  jobSiteId     String
  signInTime    DateTime  @default(now())
  signOutTime   DateTime?

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  jobSite       JobSite   @relation(fields: [jobSiteId], references: [id])
}

model Induction {
  id            String    @id @default(cuid())
  title         String
  description   String?
  content       Json      // Stores sections as JSON
  jobSiteId     String
  requiresSignature Boolean @default(true)
  expiryDays    Int       @default(365)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  jobSite       JobSite   @relation(fields: [jobSiteId], references: [id])
  completions   InductionCompletion[]
}

model InductionCompletion {
  id            String    @id @default(cuid())
  userId        String
  inductionId   String
  completedAt   DateTime  @default(now())
  signature     String?   // Base64 encoded signature

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  induction     Induction @relation(fields: [inductionId], references: [id])
}

model Swms {
  id            String    @id @default(cuid())
  title         String
  description   String?
  jobSiteId     String
  content       Json      // Stores hazards and controls as JSON
  status        SwmsStatus @default(DRAFT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdById   String
  approvedById  String?
  approvedAt    DateTime?

  // Relations
  jobSite       JobSite   @relation(fields: [jobSiteId], references: [id])
  createdBy     User      @relation("SwmsCreator", fields: [createdById], references: [id])
  signoffs      SwmsSignoff[]
}

enum SwmsStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

model SwmsSignoff {
  id            String    @id @default(cuid())
  userId        String
  swmsId        String
  signedAt      DateTime  @default(now())
  signature     String    // Base64 encoded signature

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  swms          Swms      @relation(fields: [swmsId], references: [id])
}

model WeeklyReport {
  id            String    @id @default(cuid())
  weekStarting  DateTime
  weekEnding    DateTime
  reportData    Json      // Stores report data as JSON
  sentAt        DateTime?
  sentTo        String[]
  createdAt     DateTime  @default(now())
}

